from .modeus import get_rasps


buildings_nearby = {
    "–£–õ–ö-01": ["–£–õ–ö-01",],
    "–£–õ–ö-03": ["–£–õ–ö-03",],
    "–£–õ–ö-04": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-05": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-06": ["–£–õ–ö-06",],
    "–£–õ–ö-07": ["–£–õ–ö-07",],
    "–£–õ–ö-09": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-10": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-11": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-12": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-13": ["–£–õ–ö-13",],
    "–£–õ–ö-16": ["–£–õ–ö-16",],
    "–£–õ–ö-17": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-19": ["–£–õ–ö-19",],
    "–£–õ–ö-10/–¢9": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18",
    ],
    "–£–õ–ö-10/–†18": [
        "–£–õ–ö-04",
        "–£–õ–ö-05",
        "–£–õ–ö-09",
        "–£–õ–ö-10",
        "–£–õ–ö-11",
        "–£–õ–ö-12",
        "–£–õ–ö-17",
        "–£–õ–ö-10/–¢9",
        "–£–õ–ö-10/–†18"
    ],
    "–£–õ–ö-13": ["—É–ª. –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–∞—è, 41", "–£–õ–ö-13"],
    "—É–ª. –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–∞—è, 41": ["–£–õ–ö-13", "—É–ª. –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–∞—è, 41"],
    "–£–õ–ö-07": ["–£–õ–ö-07 –°–ö", "–£–õ–ö-07"],
    "–£–õ–ö-07 –°–ö": ["–£–õ–ö-07", "–£–õ–ö-07 –°–ö"],
}

building_names = {
    "–£–õ–ö-01": "–ò–§–∏–ñ",
    "–£–õ–ö-03": "–ò–Ω–ó–µ–º",
    "–£–õ–ö-04": "–§–≠–ò",
    "–£–õ–ö-05": "–ò–ú–∏–ö–ù",
    "–£–õ–ö-06": "–ò–Ω–ë–∏–æ",
    "–£–õ–ö-07": "–°–ö –û–ª–∏–º–ø–∏—è",
    "–£–õ–ö-09": "–°–û–ö",
    "–£–õ–ö-10": "–ò–ì–∏–ü",
    "–£–õ–ö-11": "–°–æ—Ü–ì—É–º",
    "–£–õ–ö-12": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¢—é–º–ì–£",
    "–£–õ–ö-13": "–¶–µ–Ω—Ç—Ä –∑–∏–º–≤–Ω–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –¢—é–º–ì–£ (—ç–∫–æ–ø–∞—Ä–∫)",
    "–£–õ–ö-16": "–ò–ü–∏–ü",
    "–£–õ–ö-17": "–ò–≠–∏–°–ë",
    "–£–õ–ö-19": "SAS",
    "–£–õ–ö-10/–¢9": "–£—Å–∞–¥—å–±–∞ –ö–æ–∑–ª–æ–≤–∞",
    "–£–õ–ö-10/–†18": "–£—Å–∞–¥—å–±–∞ –ö–æ–ª–æ–∫–æ–ª—å–Ω–∏–∫–æ–≤—ã—Ö",
    "—É–ª. –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–∞—è, 41": "–¶–µ–Ω—Ç—Ä –∑–∏–º–≤–Ω–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –¢—é–º–ì–£ (—ç–∫–æ–ø–∞—Ä–∫)",
    "–£–õ–ö-07 –°–ö": "–°–ö –û–ª–∏–º–ø–∏—è",
}


def find_optimal(me, friends_fullnames, tomorrow=False):
    me = get_rasps(me, tomorrow).split("|")
    my_lessions = []
    for i in range(len(me)):
        if "‚Äî" in me[i]:
            my_lessions.append(
                (
                    me[i].strip(),
                    me[i + 1][me[i + 1].find("(") + 1: me[i + 1].find(")")],
                )
            )

    lessons = [
        (fullname + "|" + get_rasps(fullname, tomorrow)).split("|")
        for fullname in friends_fullnames
    ]

    friends = dict()

    for people in lessons:
        for j in range(len(people)):
            if "‚Äî" in people[j]:
                if people[0] in friends.keys():
                    friends[people[0]] += [
                        (
                            people[j].strip(),
                            people[j + 1][
                                people[j + 1].find("(") + 1: people[j + 1].find(")")
                            ],
                        )
                    ]
                else:
                    friends[people[0]] = [
                        (
                            people[j].strip(),
                            people[j + 1][
                                people[j + 1].find("(") + 1: people[j + 1].find(")")
                            ],
                        )
                    ]

    result = []

    for my_lession in my_lessions:
        for friend in friends.keys():
            for friend_lession in friends[friend]:
                if friend_lession[0] == my_lession[0]:
                    if (
                        'Microsoft' not in my_lession[1] and '–≠–ò–û' not in my_lession[1] and my_lession[1] in buildings_nearby[friend_lession[1]]
                    ):
                        result.append(
                            f'¬´{friend.strip()}¬ª –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –ø–æ—Å–ª–µ —Ç–≤–æ–µ–π –ø–∞—Ä—ã '
                            f'–≤ ¬´{my_lession[0].split("‚Äî")[0].strip()}¬ª, –æ–Ω(–∞) —Ç–æ–∂–µ –≤ —ç—Ç–æ '
                            f'–≤—Ä–µ–º—è –±—É–¥–µ—Ç –Ω–∞ –ø–∞—Ä–µ, –≤ –∫–æ—Ä–ø—É—Å–µ ¬´{building_names[friend_lession[1]]}¬ª.'
                        )
    if result:
        return "\n\n".join(result)
    return "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —ç—Ç–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –Ω–µ—Ç, —É–≤—ã üôÅ"
