from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from database.database_functions import check_user, delete_user
from keyboards.for_singup import get_signup_button
from keyboards.for_work import (
    get_backs, get_friends_today_or_tomorrow_buttons,
    get_me_today_or_tomorrow_buttons, get_work_buttons,
)
from modeus.find_optimal_time import find_optimal
from modeus.modeus import get_rasps


router = Router()


class MyCallback(CallbackData, prefix="my"):
    action: str


@router.callback_query(MyCallback.filter(F.action == "get_me_schedule"))
async def check_lessions(callback_query):
    if not check_user(callback_query.from_user.id):
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
    else:
        await callback_query.message.answer(
            "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
            reply_markup=get_me_today_or_tomorrow_buttons(),
    )


@router.callback_query(MyCallback.filter(F.action == "get_me_today"))
async def check_me_today_lessions(callback_query):
    if not check_user(callback_query.from_user.id):
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
    else:
        msg = await callback_query.message.answer(
            "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ üôÇ"
        )
        fullname = check_user(callback_query.from_user.id)
        rasp = get_rasps(fullname)
        await msg.edit_text(rasp, reply_markup=get_work_buttons())


@router.callback_query(MyCallback.filter(F.action == "get_me_tomorrow"))
async def check_me_tomorrow_lessions(callback_query):
    if not check_user(callback_query.from_user.id):
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
    else:
        msg = await callback_query.message.answer(
            "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ üôÇ"
        )
        fullname = check_user(callback_query.from_user.id)
        rasp = get_rasps(fullname, tomorrow=True)
        await msg.edit_text(rasp, reply_markup=get_work_buttons())


@router.callback_query(
    MyCallback.filter(F.action == "get_similarities")
)
async def check_friends_lessions(callback_query):
    if not check_user(callback_query.from_user.id):
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
    else:
        await callback_query.message.answer(
            "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
            reply_markup=get_friends_today_or_tomorrow_buttons(),
        )


@router.callback_query(MyCallback.filter(F.action == "get_friends_today"))
async def check_friends_lessions_today(callback_query):
    if not check_user(callback_query.from_user.id):
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
    else:
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ftd\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n/ftd –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ü–∞–≤–ª–æ–≤ –ü–∞–≤–µ–ª –ü–∞–≤–ª–æ–≤–∏—á",
            reply_markup=get_backs(),
        )


@router.callback_query(MyCallback.filter(F.action == "get_friends_tomorrow"))
async def check_friends_lessions_tomorrow(callback_query):
    if not check_user(callback_query.from_user.id):
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
    else:
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ftm\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n/ftm –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ü–∞–≤–ª–æ–≤ –ü–∞–≤–µ–ª –ü–∞–≤–ª–æ–≤–∏—á",
            reply_markup=get_backs(),
        )


@router.callback_query(MyCallback.filter(F.action == "delete_fullname"))  # [2]
async def unsignup_user(callback_query):
    fullname = check_user(callback_query.from_user.id)
    if fullname:
        delete_user(callback_query.from_user.id)
        await callback_query.message.answer(
            "–í–∞—à–µ –§–ò–û —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ üòû", reply_markup=get_signup_button()
        )
    else:
        await callback_query.message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_signup_button(),
        )


@router.callback_query(MyCallback.filter(F.action == "get_back"))
async def get_back(callback_query):
    await callback_query.message.answer(
        "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?", reply_markup=get_work_buttons()
    )


@router.message(F.text.startswith("/ftd"))  # [2]
async def check_friends(message):
    text = message.text[5:]
    print(text)
    if ',' not in text and len(text.split(' ')) > 3:
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª–∏ –§–ò–û —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
            reply_markup=get_backs(),
        )
    else:
        msg = await message.answer(
            "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        fullname = check_user(message.from_user.id)
        friends_fullnames = text.split(",")
        optimal = find_optimal(fullname, friends_fullnames, tomorrow=False)

        await msg.edit_text(optimal, reply_markup=get_work_buttons())


@router.message(F.text.startswith("/ftm"))  # [2]
async def check_friends(message):
    text = message.text[5:]
    print(text)
    if ',' not in text and len(text.split(' ')) > 3:
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª–∏ –§–ò–û —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
            reply_markup=get_backs(),
        )
    else:
        msg = await message.answer(
            "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        fullname = check_user(message.from_user.id)
        friends_fullnames = text.split(",")
        optimal = find_optimal(fullname, friends_fullnames, tomorrow=True)

        await msg.edit_text(optimal, reply_markup=get_work_buttons())


@router.message(F.text)  # [2]
async def empty_message(message):
    fullname = check_user(message.from_user.id)
    if fullname:
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.",
            reply_markup=get_work_buttons(),
        )
    else:
        await message.answer(
            "–í–∞—à–µ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å - –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_signup_button(),
        )
