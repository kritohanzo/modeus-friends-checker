from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, ReplyKeyboardRemove
from database.database_functions import add_user, check_user
from keyboards.for_singup import get_signup_button
from keyboards.for_work import get_work_buttons
from modeus.modeus import get_json_id


router = Router()


class MyCallback(CallbackData, prefix="my"):
    action: str


@router.message(Command("start"))  # [2]
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "
        "–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –µ–≥–æ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π. "
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–∞–º —Å –¥—Ä—É–∑—å—è–º–∏ "
        "–±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∏–ª–∏ –º–µ–∂–¥—É –ø–∞—Ä!\n\n"
        "–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏—Ç–µ –∫–∞–∫–∏–µ-—Ç–æ –±–∞–≥–∏ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å "
        "–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ ¬´@kritohanzo¬ª\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π - –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å "
        "—Å–≤–æ—ë –§–ò–û. –ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=get_signup_button(),
    )


@router.callback_query(MyCallback.filter(F.action == "signup"))
async def handle(callback_query):
    fullname = check_user(callback_query.from_user.id)
    if fullname:
        await callback_query.message.answer(
            "–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòâ",
            reply_markup=get_work_buttons(),
        )
    else:
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /me\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/me –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            reply_markup=ReplyKeyboardRemove(),
        )


@router.message(F.text.startswith("/me"))
async def answer_fullname(message: Message):
    text = message.text[4:]
    if check_user(message.from_user.id):
        await message.answer(
            "–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòâ",
            reply_markup=get_work_buttons(),
        )
    elif len(text.split(" ")) != 3:
        await message.answer(
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –§–ò–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –§–ò–û –µ—â—ë —Ä–∞–∑ ü§î",
            reply_markup=get_work_buttons(),
        )
    else:
        try:
            get_json_id(text)
            add_user(message.from_user.id, text)
            await message.answer(
                "–¢–µ–ø–µ—Ä—å –≤–∞—à–µ –§–ò–û –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòâ",
                reply_markup=get_work_buttons(),
            )
        except:
            await message.answer(
                "–¢–∞–∫–æ–≥–æ –§–ò–û –Ω–µ—Ç –≤ –º–æ–¥–µ—É—Å–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å? "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –§–ò–û –µ—â—ë —Ä–∞–∑ ü§î",
                reply_markup=ReplyKeyboardRemove(),
            )
